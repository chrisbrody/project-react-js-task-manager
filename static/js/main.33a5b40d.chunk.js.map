{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuid","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","useContext","className","onClick","TaskList","length","key","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","type","required","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33a5b40d.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid';\n\nexport const TaskListContext = createContext()\n\nconst TaskListContextProvider = props => {\n\tconst initialState = JSON.parse(localStorage.getItem('tasks')) || []\n\n\t// set tasks\n\tconst [tasks, setTasks] = useState(initialState);\n\n\t// craete const to store null value for later\n\tconst[editItem, setEditItem] = useState(null)\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks))\n\t}, [tasks]);\n\n\n\t// add task\n\tconst addTask = title => {\n\t    setTasks([...tasks, { title, id: uuid() }])\n\t}\n\n\t// remove task\n\tconst removeTask = id => {\n\t\t// console.log(tasks.filter(task => task.id !== id))\n\t\tsetTasks(tasks.filter(task => task.id !== id))\n\t}\n\n\t// clear list\n\tconst clearList = () => {\n\t\tsetTasks([])\n\t}\n\n\tconst findItem = (id) => {\n\t\t// find item by id\n\t\tconst item = tasks.find(task => task.id === id);\n\n\t\t// update found item using React useState - setEditItem function\n\t\tsetEditItem(item)\n\t}\n\n\tconst editTask = (title, id) => {\n\t\tconst newTasks = tasks.map(task => (task.id === id ? { title, id }: task));\n\n\t\tsetTasks(newTasks);\n\t\tsetEditItem(null)\n\t}\n\n\treturn (\n\t\t<TaskListContext.Provider \n\t\t\tvalue={{\n\t\t\t\ttasks, \n\t\t\t\taddTask, \n\t\t\t\tremoveTask,\n\t\t\t\tclearList,\n\t\t\t\tfindItem,\n\t\t\t\teditTask, \n\t\t\t\teditItem\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</TaskListContext.Provider>\n\t)\n}\n\nexport default TaskListContextProvider;\n\t","import React, { useContext } from 'react';\nimport { TaskListContext } from '../context/TaskListContext';\n\n\nconst Task = ({ task }) => {\n\t// grab functions [removeTask & findItem] from '../context/TaskListContext'\n\tconst {removeTask, findItem} = useContext(TaskListContext)\n\n\treturn (\n\t\t<li className=\"list-item\">\n\t\t\t<span id={\"task\"+task.id}>{task.title}</span>\n\t\t\t<div>\n\t\t\t\t<button \n\t\t\t\t\tonClick={() => removeTask(task.id)} \n\t\t\t\t\tclassName=\"btn-delete task-btn\"\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fas fa-trash-alt\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button \n\t\t\t\t\tonClick={() => findItem(task.id)} \n\t\t\t\t\tclassName=\"btn-edit task-btn\"\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fas fa-pen\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</li>\n\t);\n}\n\nexport default Task;","import React, { useContext } from 'react';\nimport { TaskListContext } from '../context/TaskListContext';\nimport Task from './Task';\n\n// build full task list\nconst TaskList = () => {\n\t// get tasks from '../context/TaskListContext'\n\tconst { tasks } = useContext(TaskListContext);\n\treturn (\n\t\t<div> \n\t\t\t{/* if there are tasks in the task array make the list*/}\n\t\t\t{tasks.length ? (\n\t\t\t\t<ul className=\"list\">\n\t\t\t\t\t{tasks.map(task => {\n\t\t\t\t\t\treturn <Task task={task} key={task.id}/>;\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t) : (\n\t\t\t\t// if there is no tasks in the task array, display no tasks \n\t\t\t\t<div className=\"no-tasks\">No Tasks</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default TaskList;\n\n","import React, { useContext, useState, useEffect } from 'react';\nimport { TaskListContext } from '../context/TaskListContext';\n\nconst TaskForm = () => {\n\t// grabs functions from ../context/TaskListContext.js\n\tconst {addTask, clearList, editItem, editTask} = useContext(TaskListContext);\n\n\t// update title to empty using React useState\n\tconst [title, setTitle] = useState(\"\");\n\n\t// on input change\n\tconst handleChange = e => {\n\t\t// store value fo input\n\t\tsetTitle(e.target.value);\n\t}\n\n\t// on form subimt\n\tconst handleSubmit = e => {\n\t\t// stop page refresh\n\t\te.preventDefault();\n\t\t// if user is not editing then add task, other wise the user is editing \n\t\tif(!editItem) {\n\t\t\t// add task to list\n\t\t\taddTask(title);\n\t\t\t// clears input\n\t\t\tsetTitle(\"\")\n\t\t} else {\n\t\t\teditTask(title, editItem.id)\n\t\t}\n\t}\n\n\t// React webhook - useEffect - watch for editItem value changing\n\tuseEffect(() => {\n\t\tif(editItem) {\n\t\t\tsetTitle(editItem.title)\n\t\t} else {\n\t\t\tsetTitle(\"\")\n\t\t}\n\t}, [editItem]);\n\n\treturn (\n\t\t<form onSubmit={handleSubmit} className=\"form\">\n\t\t\t<input \n\t\t\t\tonChange = {handleChange}\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={title}\n\t\t\t\tclassName=\"task-input\"\n\t\t\t\trequired\n\t\t\t/>\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<button \n\t\t\t\t\ttype=\"submit\" \n\t\t\t\t\tclassName=\"btn add-task-btn\">\n\t\t\t\t\t{editItem ? 'Edit Task' : 'Add Task'}\n\t\t\t\t</button>\n\t\t\t\t<button  \n\t\t\t\t\tonClick={clearList}\n\t\t\t\t\tclassName=\"btn clear-btn\">Clear\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default TaskForm","import React from 'react';\n\n// simple header\nconst Header = () => {\n\treturn (\n\t\t<div className=\"header\">\n\t\t\t<h1>Task Manager</h1>\n\t\t</div>\n\t)\n}\n\nexport default Header","import React from 'react'; \nimport TaskList from './TaskList';\nimport TaskForm from './TaskForm';\nimport Header from './Header'\nimport TaskListContextProvider from '../context/TaskListContext';\n\nimport '../App.css'\n\n\n// content display using '../context/TaskListContext'\nconst App = () => {\n  return (\n    <TaskListContextProvider>\n      <div className=\"container\">\n      \t<div className=\"app-wrapper\">\n      \t\t<div className=\"main\">\n            {/* from header.js*/}\n            <Header />\n            {/* from TaskForm.js*/}\n            <TaskForm />\n            {/* from TaskList.js*/}\n      \t\t\t<TaskList />\n      \t\t</div>\n      \t</div>\n      </div>\n    </TaskListContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}